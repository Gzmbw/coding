#c++函数的新特性
1.函数参数的默认值
如:void fun(int i,int j=5,int k=10);//j和k有默认值。
但是对于void fun(int i,int j=5,int k);//这种写法是错误的。有默认值的要放在后面。有默认值参数值的参数必须在参数表的最右端。
1.1通过例子解释一下在使用函数默认值是注意事项
void fun(int i,int j=5,int k=10);//定义的时候先进行声明，声明时可以加默认值。
void fun(int i,int j,int k)//而在定义时，不建议把默认值写上
{
   cout<<i<<j<<k;
}
int main()
{
   fun(20);     //i=20,j=5,k=10
   fun(20,30);  //i=20,j=30,k=10
   fun(20,30,40);//i=20,j=30,k=40
   return 0;
}
结论：无实参则用默认值，否则实参覆盖默认值。

2.函数重载
条件是在相同作用域内：用同一函数名定义的多个函数；参数个数和参数类型不同。这样多个函数彼此
互称为重载。
2.1例子：int getMax(int x,int y,int z){}
         int getMax(double x,double y){}
思考：编译器如何识别重载的函数？根据实参类型和实参个数来调用相应的函数。
思考：重载带来什么好处？在起函数名字是有好处。

3.内联函数
      普通函数                  内联函数
 main()
   |1    2|---fun()       编译时将函数体代码和实参代替
   |      |     |         函数调用语句，在步骤2,4节省时间
  fun()----     |3
   |      |     |
   |5    4|_____| 
  结束          
3.1内联函数的关键字：inline
inline int max(int a,int b,int c);//声明   int main()
int main()                                 {
{                                             int i=10,j=20,k=30,m;
   int i=10,j=20,k=30,m;                      int a,b,c;
   m=max(i,j,k);//由于使用内联函数，直接把     a=i;b=j;c=k;
                //max(i,j,k)函数体放在这里     if(b>a) a=b;
   cout<<"max="<<m<<endl;                     if(c>a) a=c;
   return 0;                                  m=a;
}                                             cout<<"max="<<m<<endl;
                                              return 0;
                                            }
3.2内联编译是建议性的，由编译器决定;
   逻辑简单，调用频繁的函数建议使用内联; 
   递归函数无法使用内联方式；
