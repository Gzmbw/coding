1.虚函数与虚析构函数原理
如何实现虚函数和虚析构函数？
1.1函数指针
  对象指针：指针指向对象；
  函数指针：指针指向函数；
           函数本质是一段二进制代码，写在内存。我们可以通过指针指向代码的开头，那么计算机就从开头一直往下执行，直到结尾，并且通过指令返回。

2.多态的例子
class Shape
{
public:
   virtual double calcArea()//虚函数
   {  return 0;}
protected:
   int m_iEdge;
};
class Circle:public Shape
{
public:
   Cricle(double r);
   virtual double calcArea();
private:
   double m_dR;
};

3.函数的覆盖与隐藏
3.1隐藏：如果定义了父类和子类，出现的同名函数，这个时候就出现了函数的隐藏。
3.2覆盖：如果我们没有在子类定义了同名的虚函数，那么在子类虚函数表中会写入父类的相应虚函数的函数入口地址；如果我们在子类定义了同名的虚函数，那么在子类的虚函数表中就会把原来的父类虚函数地址覆盖，变为子类的虚函数地址。

4.虚析构函数实现原理
虚析构函数的特点是当我们在父类当中通过virtual修饰析构函数之后，我们通过父类的指针再去指子类的对象，然后通过delete+父类指针就会释放掉子类对象。

*理论前提：
   执行完子类的析构函数就会执行父类的析构函数。
class Shape
{
public:
   virtual double calcArea()//虚函数
   {    return 0;}
   virtual ~Shape(){}//虚析构函数
protected:
   int m_iEdge;
};
class Circle:public Shape
{
public:
   Circle(double r);
   virtual double calcArea();
   virtual ~Circle();
private:
   double m_dR;
};
int main()
{
   Shape *shape=new Circle(10.0);
   delete shape;
   shape = NULL;
   return 0;
}

5.证明虚函数表指针的存在

